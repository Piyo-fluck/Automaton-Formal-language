#import "@preview/diverential:0.2.0": *
#show math.equation: set text(14pt)
#show math.equation: set text(font: "New Computer Modern Math")
#set text(font: "Times New Roman") // 本文のフォント指定
#let mixed(body) = {
  set text(weight: "medium")
  show regex("[\p{scx:Han}\p{scx:Hira}\p{scx:Kana}\d]"): set text(font: "Times New Roman")
  body
} // 和欧混植のフォント別々指定

//#set page(header: mixed[M7-S5]) // 柱へ応用

#let title(body) = {
  set align(center)
  set text(size: 2em)
  set text(style:"italic")

  v(0em)
  mixed(body) // タイトルへ応用
} // タイトルのスタイル設定
#title[Automaton-Formal-language] // タイトルの呼び出し

#show heading: mixed// 見出しへ応用
#set align(center)

= Introduction
#set align(left)
== 1.1 オートマトンと形式言語を学ぶ意義
  　Webマイニングやコンパイラ・文書解析、生物学では物質の構造推定に用いられる。このレポジトリには二冊の参考書のまとめに加え、大学院試験の対策や演習問題とその解答を挙げていこうと思う。
== 1.2 オートマトンと形式言語とは
　#text(red)[オートマトン]（s:automaton, p:automata）は、計算をしたり、ある文がある言語に属するか否かを判断したり、文を生成したりする抽象的機械である。計算とは何かを定義づける為の議論において登場する。一方、#text(red)[文法]（grammar）は、特定の言語に属する文（記号列）と、属さない文とを判別する#text(red)[規則]の集まりである。
== 1.3 オートマトン
=== 1.3.1 状態機械
　「計算」を行うとみなせる機械は全てオートマトンである。与えられた記号列がある言語に属するか否かを判定する機械も、「その判別を行う「計算」を実行する」とみなせるので、そのような機械もオートマトンである。また、その言語に属する記号列（文）を生成する機会も「その生成をするための「計算」を行う」とみなせるのでオートマトンである。\
　また、オートマトンは状態機械（state machine）ととらえることができる。#text(red)[状態機械]とは、以下の性質を持つものである。\
- 内部に状態を持っており、入力に応じて状態を変える。
- 入力と状態に応じて出力をするかもしれない。\
例１　状態機械\
- 50円硬貨のみを受け付ける自動販売機
- 返却ボタン付きで、ボタンをオスと内部のお金を全部出力する
- 150円揃うと、カードを出力する\
この状態機械の#text(red)[状態遷移図]を下に示す。
#set align(center)
#set figure(numbering: none)
#figure(
  image("auto1_1.png", width: 80%),
  caption: [
    図1.1: 50円硬貨3枚でカードが1枚出る,返却ボタン付き状態機械の状態遷移図
  ],
)
\
#set align(left)
以下では、例１の状態機械を例に、形式的に記述していく。\
- 50円硬貨の入力を $a$, 返却ボタンの入力を $b$ で表す。
- 出力も,カードを $x$, 50円を $y$, 100円を $z$ とする。
- 状態に通し番号付きで $q_0$, $q_1$, $q_2$ と記号を付ける。$phi.alt$ は「なし」を表す。
- 状態 $q$ から状態 $q'$ に向かう矢印をつける。ただし、ここでは $q$ と $q'$ は、$q_0$, $q_1$, $q_2$ のいずれかである。さらに, $q$ から $q'$ へ向かう矢印のそばに入力/出力を記す
- 初期状態に矢印「$->$」をつける。
#set align(center)
#figure(
  image("auto1_2.png", width: 80%),
  caption: [
    図1.2: 図1.1を形式的に表した状態遷移図
  ],
)
#set align(left)
この状態機械は出力も行うので、出力付きオートマトンと呼ばれる。
　出力付きオートマトンに対して、出力なしのオートマトンを考えることができる。
それは、状態 $q$ から $q'$ への矢印に対して入力記号だけを付したものになる。形式言語を考える場合は出力を考えないことが多く、
ある特別の状態にたどり着くことのみを目的にする。その特別な状態のことを#text(red)[受理状態]（accepting state）という。
受理状態にたどり着くような記号列の全部の集まりを、
オートマトンが#text(red)[受理する言語]（accepting language）、あるいは、オートマトンの#text(red)[受理言語]という。\
　図1.3の状態遷移図をオートマトンは、出力なしオートマトンの一つの例である。入力記号は $a$ と $b$ の二つで、
$q_2$ は受理状態である。例えば、記号列 $a a b b a$ は、初期状態 $q_0$ から始めて左から順に１文字ずつ読んでは、
今の状態と今読んだ文字が記された矢印に従って状態を変え、全ての文字を読み終えたときに受理状態にたどり着くので、$a a b b a$ はこのオートマトンの受理言語に含まれる。
#set align(center)
#figure(
  image("auto1_3.png", width: 45%),
  caption: [
    図1.3: 受理状態が存在する状態遷移図の例
  ],
)
#set align(left)
　より詳しく述べれば、初めに状態 $q_0$ において記号列 $a a b b a$ の一番左端の $a$ を読むと、
$q_0$から出ている矢印のうち、 $a$ と書かれている矢印の先にある状態 $q_2$ に移る。
状態 $q_2$ で左から２番目の $a$ を読んで、$q_2$ から出ている矢印のうち、$a$ と書かれている矢印の先にある状態 $q_0$ に移る。
同様に、$q_0$ で次の $b$ を読んで $b$ が記された矢印に従って $q_1$ へ行き、さらに次の $b$ で $q_0$ へ、最後の $a$ で状態 $q_2$ に移る。\
　記号列を全て読み終えたときに受理状態にいるので、このオートマトンは $a a b b a$ を受理する。
しかし、例えば $b b a a$ は、$q_0$ から始めて最後にたどり着く状態が受理状態ではない状態 $q_0$ なので、受理言語には含まれない。
#block(
  fill: luma(230),
  inset: 8pt,
  radius: 4pt,
)[
例２　状態機械２\
　入力を０と１の２つの記号とする。\
次の受理言語をもつオートマトンの状態遷移図を描け。\
(1) 全ての記号列からなる言語\
(2) 文の最後が２つ以上の１で終わる記号列からなる言語
#block(
  fill: luma(290),
  inset: 8pt,
  radius: 4pt,
)[
$circle$ 解答例\
(1) ０と１からなる全ての記号列の集まりは { 0, 1, 00, 01, 10, 11, 000, 001, 010, 100, ... } である。図1.4の状態遷移図を持つオートマトンを考えれば、上の集合のどの要素に対しても受理状態で終わる。
#set align(center)
#figure(
  image("auto1_4.png", width: 45%),
  caption: [
    図1.4: 解答例. 0, 1の２つの記号の入力から、\
    全ての記号列からなる言語を受理するオートマトンの状態遷移図
  ],
)
#set align(left)
(2) 問いの言語は { 11, 011, 111, 0011, 0111, 1011, 1111, 0011, ... } である。図1.5の状態遷移図を持つオートマトンは、それらの要素を過不足なく全て受理する。
#set align(center)
#figure(
  image("auto1_5.png", width: 50%),
  caption: [
    図1.5: 解答例. 0, 1の２つの記号の入力から、
    最後が２つ以上の１で終わる記号列からなる言語を受理するオートマトンの状態遷移図
  ],
)
]]
=== 1.3.2 形式言語
　オートマトンに続いて、#text(red)[形式言語]について説明しよう。そのために、まず#text(red)[形式文法]の概念について述べる。形式文法とは、特定の言語に属する文と属さない文とを区別する規則の集合のことである。ここで規則とは、例えば\
- 文は、主部と述部からなる。
- 主部は、名詞句と格助詞からなる。
- 述部は、副詞句と述語からなる。
といったものである。
　自然言語（英語、日本語、中国語など）の文法や計算機言語（Java, C++, Python, XMLなど）の文法はこのような規則の集合とみなせる。\
　形式言語の分野では、（形式）言語に先立ってまず形式文法が定められ、それに基づいて（形式）言語が定義される。すなわち定義された特定の文法を用いて定義される（形式）言語（Formal language）とは、 もととなる有限個の記号から、 文法の規則に従って作られる#text(red)[記号列]の全体の集合のことである。逆に、ある与えられた記号列がその言語に属するか否かの判断にも言語の文法は用いられる。\
　以下本書では、処理能力に差がある幾つかの代表的なオートマトンについてみていく。それらは、有限状態オートマトンとプッシュダウンオートマトン、線形拘束オートマトン、チューリングマシンである。\
　また、形式文法についてもいくつかの有名なものについて詳述する。それらは、正規文法と文脈自由文法、文脈依存文法、句構造文法である。\
　この４種類のオートマトンと４種類の文法との間には、受理する言語あるいは生成する言語を介在させると、見事な対応関係がある。
#set align(center)
#figure(
  image("auto1_6.png", width: 60%),
  caption: [
    図1.6: 記号列の集合と（形式）言語
  ],
)
#figure(
  image("auto1_7.png", width: 45%),
  caption: [
    図1.7: 各種オートマトンと各種文法の対応関係\
  $circle.filled.small a:$有限状態オートマトン、正規文法\
  $circle.filled.small b:$プッシュダウンオートマトン、文脈自由文法\
  $circle.filled.small c:$線形拘束オートマトン、文脈依存文法\
  $circle.filled.small d:$チューリングマシン、句構造文法\
  ]
)
#set align(left)
これらのオートマトンや形式文法、さらにはそれらの間の階層構造とそれらの対応関係を詳述するために必要な数学を以降で簡単にまとめよう。\

== 1.4 数学的準備
$circle.filled.small$ 集合\
　#text(red)[集合]は区別できるモノの集まりである。集合の中身である区別できるモノを、その集合の#text(red)[要素]という。$a$ が集合 $A$ の要素であることを、$a in A$ と書く。また、$b$ が $A$ の要素でないことを、$b in.not A$ と書く。空の集合、つまり要素が１つも無い集合も認め、それを空集合と言い、$emptyset$ で表す。\
　集合 $A$ と $B$ とが等しい、すなわち $A=B$ が成り立つのは、$A$ の要素と $B$ の要素が完全に一致しているときである。
集合 $A,B$ について、について、任意の $x in A$ が $x in B$ であるとき $A subset.eq B$ と書き、$A$ は $B$ の#text(red)[部分集合]という